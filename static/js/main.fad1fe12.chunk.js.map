{"version":3,"sources":["resources/cik_ticker.csv","components/SearchBar.js","components/StatementKeys.js","components/StatementTable.js","components/SelectSheet.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","suggestions","setSuggestions","tickers","setTickers","names","setNames","tickToCik","setTickToCik","nameToTick","setNameToTick","tickToName","setTickToName","value","setValue","useEffect","fetch","rawText","then","r","text","split","map","str","vals","toUpper","Object","keys","sort","className","onSubmit","e","cik","toString","length","parentSetName","parentSetCik","input","matches","exec","console","log","preventDefault","type","list","placeholder","onChange","target","sug1","sug2","regex","RegExp","filter","v","test","includes","concat","slice","id","item","index","allKeys","StatementTable","fillData","sheet","ind","keyData","data","usdVals","label","val","loaded","Table","striped","bordered","hover","size","createTable","SelectSheet","initActive","setInitActive","ButtonGroup","onClick","parentSetSheet","Button","variant","active","selected","App","name","setName","setCik","setSheet","setData","loading","setLoading","setLoaded","result","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAAe,MAA0B,uC,OCgI1BA,MA5Hf,SAAmBC,GACf,IACA,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAoCR,mBAAS,IAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAA0BZ,mBAAS,IAAnC,mBAAOa,EAAP,KAAcC,EAAd,KAyGA,OA9EAC,qBAAU,WAxBNC,MAAMC,GACLC,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UACVF,MAAK,SAAAE,GACF,IAAMb,EAAY,GACZE,EAAa,GACbE,EAAa,GAEnBS,EAAKC,MAAM,MAAMC,KAAI,SAAAC,GAEf,IAAMC,EAAOD,EAAIF,MAAM,KACvBd,EAAUkB,kBAAQD,EAAK,KAAOA,EAAK,GACnCf,EAAWe,EAAK,IAAMC,kBAAQD,EAAK,IACnCb,EAAWc,kBAAQD,EAAK,KAAOA,EAAK,MAE1C,IAAMrB,EAAUuB,OAAOC,KAAKpB,GAAWqB,OACjCvB,EAAQqB,OAAOC,KAAKlB,GAAYmB,OACtCxB,EAAWD,GACXG,EAASD,GACTG,EAAaD,GACbG,EAAcD,GACdG,EAAcD,QAMnB,IA6EC,8BACI,uBAAMkB,UAAU,mBAAmBC,SAzCtB,SAACC,GAClB,GAAGN,kBAAQZ,KAAUN,EAAW,CAG5B,IAFA,IACIyB,EADWzB,EAAUkB,kBAAQZ,IAChBoB,WACXD,EAAIE,OAAS,IACfF,EAAM,IAAMA,EAEhBjC,EAAMoC,cAAcxB,EAAWc,kBAAQZ,KACvCd,EAAMqC,aAAaJ,QAChB,GAAGnB,KAASJ,EAAY,CAG3B,IAFA,IACIuB,EADWzB,EAAUE,EAAWI,IACnBoB,WACXD,EAAIE,OAAS,IACfF,EAAM,IAAMA,EAEhBjC,EAAMoC,cAActB,GACpBd,EAAMqC,aAAaJ,OAChB,CACH,IAAIK,EAAQxB,EACTZ,EAAYiC,OAAS,IACpBG,EAAQpC,EAAY,IAExB,IACIqC,EADQ,cACQC,KAAKF,GACzB,GAAe,OAAZC,GAAoBb,kBAAQa,EAAQ,MAAO/B,EAAW,CAGrD,IAFA,IACIyB,EADWzB,EAAUkB,kBAAQa,EAAQ,KACxBL,WACXD,EAAIE,OAAS,IACfF,EAAM,IAAMA,EAEhBjC,EAAMoC,cAAcxB,EAAWc,kBAAQa,EAAQ,MAC/CvC,EAAMqC,aAAaJ,QAEnBQ,QAAQC,IAAI,iBAGpBV,EAAEW,kBAKE,UACI,uBAAOC,KAAK,OAAOC,KAAK,UAAU/B,MAAOA,EAAOgB,UAAU,eAAegB,YAAY,SAASC,SA5EpF,SAACf,GACnB7B,EAAe,IACf,IAAMW,EAAQkB,EAAEgB,OAAOlC,MACvBC,EAASD,GACT,IAAIZ,EAAc,GACd+C,EAAO,GACPC,EAAO,GACX,GAAIpC,EAAMqB,OAAS,EAAG,CAClB,IAAMgB,EAAQ,IAAIC,OAAJ,WAAetC,GAAQ,KACrCmC,EAAO7C,EAAQiD,QAAO,SAAAC,GAAC,OAAIH,EAAMI,KAAKD,MAGtCJ,GAFAA,EAAO5C,EAAM+C,QAAO,SAAAC,GAAC,OAAIH,EAAMI,KAAKD,OAExB/B,KAAI,SAAAC,GACZ,IAAIyB,EAAKO,SAAS9C,EAAWc,IACzB,MAAM,IAAN,OAAWd,EAAWc,GAAtB,aAA+BA,MAOvCtB,GADAA,GAHA+C,EAAOA,EAAK1B,KAAI,SAAAC,GACZ,MAAM,IAAN,OAAWA,EAAX,aAAmBZ,EAAWY,QAEfiC,OAAOP,IACAQ,MAAM,EA5DhB,IA8DpBvD,EAAeD,IAqDgH,aAAW,SAAS,mBAAiB,kBAhDhK,0BAAUyD,GAAG,UAAb,SACKzD,EAAYqB,KAAI,SAACqC,EAAKC,GAAN,OAAc,wBAAoB/C,MAAO8C,GAAdC,QAiD5C,uBAAO/B,UAAU,4BAA4Bc,KAAK,SAAS9B,MAAM,KAAK6C,GAAG,wB,QCjD5EG,EAAU,CACnB,GAzEe,CACf,sDACA,6BACA,cACA,mBACA,gCACA,yCACA,kCACA,iCACA,mBACA,oBACA,sBACA,2BACA,kBACA,iCACA,4BACA,8GACA,0BACA,wCACA,gBACA,wBACA,2BAqDA,IA/CiB,CACjB,gEACA,gBACA,uCACA,yBACA,4CACA,4BACA,kCACA,6CACA,6CACA,6CACA,iHACA,iEAoCA,GAjCgB,CAChB,wCACA,8BACA,+BACA,eACA,6BACA,qBACA,gBACA,iCACA,+BACA,wBACA,mBACA,SACA,yBACA,0BACA,uCACA,kBACA,sBACA,qBACA,yBACA,6BACA,wBACA,cACA,+CACA,qCACA,kDACA,qBACA,qC,MC2BWC,MA7Ff,SAAwB/D,GAEpB,IA+DMgE,EAAW,WACb,MAAmB,OAAhBhE,EAAMiE,MA/DIH,EAAQ9D,EAAMiE,OAAO1C,KAAI,SAACC,EAAI0C,GACvC,IAAMC,EAAUnE,EAAMoE,KAAN,MAAoB,WAAW5C,GAC/C,GAAG2C,EAAS,CACR,IAAME,EAAUF,EAAO,MAAP,IACVG,EAAQH,EAAO,MACjBI,EAAMF,EAAQA,EAAQlC,OAAS,GAAzB,IAIV,OAHIX,EAAIgC,SAAS,cACbe,GAAO,KAGP,+BACI,oBAAIzC,UAAU,QAAd,SAAuBwC,IACvB,oBAAIxC,UAAU,OAAd,SAAsByC,MAFjBL,GAKV,OAAO,QAkDQ,QAAhBlE,EAAMiE,MA5CHH,EAAQ9D,EAAMiE,OAAO1C,KAAI,SAACC,EAAI0C,GACvC,IAAMC,EAAUnE,EAAMoE,KAAN,MAAoB,WAAW5C,GAC/C,GAAG2C,EAAS,CACR,IAAME,EAAUF,EAAO,MAAP,IACVG,EAAQH,EAAO,MACjBI,EAAMF,EAAQA,EAAQlC,OAAS,GAAzB,IAIV,OAHIX,EAAIgC,SAAS,cACbe,GAAO,KAGP,+BACI,oBAAIzC,UAAU,QAAd,SAAuBwC,IACvB,oBAAIxC,UAAU,OAAd,SAAsByC,MAFjBL,GAKV,OAAO,QA+BQ,OAAhBlE,EAAMiE,MAzBHH,EAAQ9D,EAAMiE,OAAO1C,KAAI,SAACC,EAAI0C,GACvC,IAAMC,EAAUnE,EAAMoE,KAAN,MAAoB,WAAW5C,GAC/C,GAAG2C,EAAS,CACR,IAAME,EAAUF,EAAO,MAAP,IACVG,EAAQH,EAAO,MACjBI,EAAMF,EAAQA,EAAQlC,OAAS,GAAzB,IAIV,OAHIX,EAAIgC,SAAS,cACbe,GAAO,KAGP,+BACI,oBAAIzC,UAAU,QAAd,SAAuBwC,IACvB,oBAAIxC,UAAU,OAAd,SAAsByC,MAFjBL,GAKV,OAAO,aAUX,GAgBX,OACI,8BAZgB,WAChB,GAAGlE,EAAMwE,OACL,OACI,cAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAnC,SACI,gCACCb,QAQRc,M,gBCrEEC,MApBf,SAAqB/E,GAEjB,MAAmCC,oBAAS,GAA5C,mBAAO+E,EAAP,KAAkBC,EAAlB,KAOA,OACI,8BACI,eAACC,EAAA,EAAD,CAAaC,QAPD,SAACnD,GACjBhC,EAAMoF,eAAepD,EAAEgB,OAAOlC,OAC9BmE,GAAc,IAKV,UACI,cAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYxE,MAAM,KAAKyE,OAAQP,EAAYQ,UAAU,EAArE,8BACA,cAACH,EAAA,EAAD,CAAQC,QAAQ,YAAYxE,MAAM,MAAlC,iCACA,cAACuE,EAAA,EAAD,CAAQC,QAAQ,YAAYxE,MAAM,KAAlC,iC,iBCkCD2E,MA5Cf,WACE,MAAwBxF,mBAAS,MAAjC,mBAAOyF,EAAP,KAAaC,EAAb,KACA,EAAqB1F,mBAAS,MAA9B,mBAAOgC,EAAP,KAAW2D,EAAX,KACA,EAAyB3F,mBAAS,MAAlC,mBAAOgE,EAAP,KAAa4B,EAAb,KACA,EAAuB5F,mBAAS,IAAhC,mBAAOmE,EAAP,KAAY0B,EAAZ,KACA,EAA6B7F,oBAAS,GAAtC,mBAAO8F,EAAP,KAAeC,EAAf,KACA,EAA2B/F,oBAAS,GAApC,mBAAOuE,EAAP,KAAcyB,EAAd,KAsBA,OApBAjF,qBAAU,WACHiB,IACC+D,GAAW,GACX/E,IAAM,iDAAD,OAAkDgB,EAAlD,UACAd,MACG,SAAC+E,GACGzD,QAAQC,IAAIwD,EAAO9B,MACnB0B,EAAQI,EAAO9B,MACf6B,GAAU,GACVD,GAAW,MAEf,SAACG,GACG1D,QAAQC,IAAIyD,GACZH,GAAW,SAI5B,CAAC/D,IAIF,sBAAKH,UAAU,MAAf,UACI,+BAAK4D,EAAL,IAAYzD,KACZ,qBAAKH,UAAU,aAAf,SACI,cAAC,EAAD,CAAWO,aAAcuD,EAAQxD,cAAeuD,MAEpD,qBAAK7D,UAAU,eAAf,SACI,cAAC,EAAD,CAAasD,eAAgBS,MAEjC,qBAAK/D,UAAU,kBAAf,SACI,cAAC,EAAD,CAAgBmC,MAAOA,EAAOG,KAAMA,EAAM2B,QAASA,EAASvB,OAAQA,UCjCjE4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnF,MAAK,YAAkD,IAA/CoF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fad1fe12.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cik_ticker.5c555605.csv\";","import { toUpper } from \"lodash\";\nimport {useState, useEffect} from \"react\";\nimport rawText from \"../resources/cik_ticker.csv\";\n\nfunction SearchBar(props) {\n    const MAX_SUGGESTIONS = 10;\n    const [suggestions, setSuggestions] = useState([]);\n    const [tickers, setTickers] = useState([]);\n    const [names, setNames] = useState([]);\n    const [tickToCik, setTickToCik] = useState({});\n    const [nameToTick, setNameToTick] = useState({});\n    const [tickToName, setTickToName] = useState({});\n    const [value, setValue] = useState(\"\");\n\n    const loadTickers = () => {\n        fetch(rawText)\n        .then(r=>r.text())\n        .then(text => {\n            const tickToCik = {};\n            const nameToTick = {};\n            const tickToName = {};\n            // eslint-disable-next-line\n            text.split('\\n').map(str => {\n                  //const pair = str.split(/\\s+/);\n                  const vals = str.split(\"|\");\n                  tickToCik[toUpper(vals[1])] = vals[0];\n                  nameToTick[vals[2]] = toUpper(vals[1]);\n                  tickToName[toUpper(vals[1])] = vals[2];\n            });\n            const tickers = Object.keys(tickToCik).sort();\n            const names = Object.keys(nameToTick).sort();\n            setTickers(tickers);\n            setNames(names);\n            setTickToCik(tickToCik);\n            setNameToTick(nameToTick);\n            setTickToName(tickToName);\n        });\n    }\n\n    useEffect(() => {\n        loadTickers();\n    }, []);\n\n    // can be optimized\n    const onTextChanged = (e) => {\n        setSuggestions([]);\n        const value = e.target.value;\n        setValue(value);\n        let suggestions = [];\n        let sug1 = [];\n        let sug2 = [];\n        if (value.length > 0) {\n            const regex = new RegExp(`^${value}`,'i');\n            sug1 = tickers.filter(v => regex.test(v));\n            sug2 = names.filter(v => regex.test(v));\n            // eslint-disable-next-line\n            sug2 = sug2.map(str => {\n                if(!sug1.includes(nameToTick[str])) {\n                    return `(${nameToTick[str]}) ${str}`;\n                }\n            });\n            sug1 = sug1.map(str => {\n                return `(${str}) ${tickToName[str]}`;\n            });\n            suggestions = sug1.concat(sug2);\n            suggestions = suggestions.slice(0,MAX_SUGGESTIONS);\n        }\n        setSuggestions(suggestions);\n    }\n\n    const getSuggestions = () => {\n        return (\n            <datalist id='tickers'>\n                {suggestions.map((item,index)=><option key={index} value={item}/>)}\n            </datalist>\n        );\n    }\n\n    const handleSubmit = (e) => {\n        if(toUpper(value) in tickToCik) {\n            const cikNum = tickToCik[toUpper(value)];\n            let cik = cikNum.toString();\n            while(cik.length < 10) {\n                cik = '0' + cik;\n            }\n            props.parentSetName(tickToName[toUpper(value)]);\n            props.parentSetCik(cik);\n        } else if(value in nameToTick) {\n            const cikNum = tickToCik[nameToTick[value]];\n            let cik = cikNum.toString();\n            while(cik.length < 10) {\n                cik = '0' + cik;\n            }\n            props.parentSetName(value);\n            props.parentSetCik(cik);\n        } else {\n            var input = value;\n            if(suggestions.length > 0) {\n                input = suggestions[0];\n            }\n            var regex = /\\(([^)]+)\\)/;\n            var matches = regex.exec(input);\n            if(matches !== null && toUpper(matches[1]) in tickToCik) {\n                const cikNum = tickToCik[toUpper(matches[1])];\n                let cik = cikNum.toString();\n                while(cik.length < 10) {\n                    cik = '0' + cik;\n                }\n                props.parentSetName(tickToName[toUpper(matches[1])]);\n                props.parentSetCik(cik);\n            } else {\n                console.log(\"invalid input\");\n            }\n        }\n        e.preventDefault();\n    }\n\n    return (\n        <div>\n            <form className=\"input-group mb-3\" onSubmit={handleSubmit}>\n                <input type=\"text\" list=\"tickers\" value={value} className=\"form-control\" placeholder=\"Ticker\" onChange={onTextChanged} aria-label=\"Ticker\" aria-describedby=\"button-addon2\"/>\n                {getSuggestions()}\n                <input className=\"btn btn-outline-secondary\" type=\"submit\" value=\"Go\" id=\"button-addon2\"/>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchBar;\n","\nconst incomeKeys = [\n    \"RevenueFromContractWithCustomerExcludingAssessedTax\",\n    \"CostOfGoodsAndServicesSold\",\n    \"GrossProfit\",\n    \"MarketingExpense\",\n    \"ResearchAndDevelopmentExpense\",\n    \"SellingGeneralAndAdministrativeExpense\",\n    \"GeneralAndAdministrativeExpense\",\n    \"OtherOperatingIncomeExpenseNet\",\n    \"CostsAndExpenses\",\n    \"OperatingExpenses\",\n    \"OperatingIncomeLoss\",\n    \"InvestmentIncomeInterest\",\n    \"InterestExpense\",\n    \"OtherNonoperatingIncomeExpense\",\n    \"NonoperatingIncomeExpense\",\n    \"IncomeLossFromContinuingOperationsBeforeIncomeTaxesMinorityInterestAndIncomeLossFromEquityMethodInvestments\",\n    \"IncomeTaxExpenseBenefit\",\n    \"IncomeLossFromEquityMethodInvestments\",\n    \"NetIncomeLoss\",\n    \"EarningsPerShareBasic\",\n    \"EarningsPerShareDiluted\"]\n\n// Must add all increasedecrease tags later\n// investing: Add payments, proceeds: should be in latest period and be non-zero\n// financing: add payments, proceeds with debt/stock/share\n// can add free cash flow\nconst cashFlowKeys = [\n    \"CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents\",\n    \"NetIncomeLoss\",\n    \"DepreciationDepletionAndAmortization\",\n    \"ShareBasedCompensation\",\n    \"OtherOperatingActivitiesCashFlowStatement\",\n    \"OtherNoncashIncomeExpense\",\n    \"DeferredIncomeTaxExpenseBenefit\",\n    \"NetCashProvidedByUsedInOperatingActivities\",\n    \"NetCashProvidedByUsedInInvestingActivities\",\n    \"NetCashProvidedByUsedInFinancingActivities\",\n    \"CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalentsPeriodIncreaseDecreaseIncludingExchangeRateEffect\",\n    \"CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents\"\n]\n\nconst balanceKeys = [\n    \"CashAndCashEquivalentsAtCarryingValue\",\n    \"MarketableSecuritiesCurrent\",\n    \"AccountsReceivableNetCurrent\",\n    \"InventoryNet\",\n    \"NontradeReceivablesCurrent\",\n    \"OtherAssetsCurrent\",\n    \"AssetsCurrent\",\n    \"MarketableSecuritiesNoncurrent\",\n    \"PropertyPlantAndEquipmentNet\",\n    \"OtherAssetsNoncurrent\",\n    \"AssetsNoncurrent\",\n    \"Assets\",\n    \"AccountsPayableCurrent\",\n    \"OtherLiabilitiesCurrent\",\n    \"ContractWithCustomerLiabilityCurrent\",\n    \"CommercialPaper\",\n    \"LongTermDebtCurrent\",\n    \"LiabilitiesCurrent\",\n    \"LongTermDebtNoncurrent\",\n    \"OtherLiabilitiesNoncurrent\",\n    \"LiabilitiesNoncurrent\",\n    \"Liabilities\",\n    \"CommonStocksIncludingAdditionalPaidInCapital\",\n    \"RetainedEarningsAccumulatedDeficit\",\n    \"AccumulatedOtherComprehensiveIncomeLossNetOfTax\",\n    \"StockholdersEquity\",\n    \"LiabilitiesAndStockholdersEquity\"\n]\n\nexport const allKeys = {\n    \"is\" : incomeKeys,\n    \"cfs\" : cashFlowKeys,\n    \"bs\" : balanceKeys\n}","import {Table} from \"react-bootstrap\";\nimport {allKeys} from \"./StatementKeys\";\nimport \"./StatementTable.css\";\n\nfunction StatementTable(props) {\n\n    const fillIncome = () => {\n        const rows = allKeys[props.sheet].map((str,ind) => {\n            const keyData = props.data[\"facts\"][\"us-gaap\"][str];\n            if(keyData) {\n                const usdVals = keyData[\"units\"][\"USD\"];\n                const label = keyData[\"label\"];\n                let val = usdVals[usdVals.length - 1][\"val\"];\n                if(!str.includes(\"PerShare\")) {\n                    val /= 1000000\n                }\n                return (\n                    <tr key={ind}>\n                        <td className=\"label\">{label}</td>\n                        <td className=\"data\">{val}</td>\n                    </tr>\n                );\n            } else return null;\n        });\n        return rows;\n    }\n\n    const fillCashFlow = () => {\n        const rows = allKeys[props.sheet].map((str,ind) => {\n            const keyData = props.data[\"facts\"][\"us-gaap\"][str];\n            if(keyData) {\n                const usdVals = keyData[\"units\"][\"USD\"];\n                const label = keyData[\"label\"];\n                let val = usdVals[usdVals.length - 1][\"val\"];\n                if(!str.includes(\"PerShare\")) {\n                    val /= 1000000\n                }\n                return (\n                    <tr key={ind}>\n                        <td className=\"label\">{label}</td>\n                        <td className=\"data\">{val}</td>\n                    </tr>\n                );\n            } else return null;\n        });\n        return rows;\n    }\n\n    const fillBalance = () => {\n        const rows = allKeys[props.sheet].map((str,ind) => {\n            const keyData = props.data[\"facts\"][\"us-gaap\"][str];\n            if(keyData) {\n                const usdVals = keyData[\"units\"][\"USD\"];\n                const label = keyData[\"label\"];\n                let val = usdVals[usdVals.length - 1][\"val\"];\n                if(!str.includes(\"PerShare\")) {\n                    val /= 1000000\n                }\n                return (\n                    <tr key={ind}>\n                        <td className=\"label\">{label}</td>\n                        <td className=\"data\">{val}</td>\n                    </tr>\n                );\n            } else return null;\n        });\n        return rows;\n    }\n\n    const fillData = () => {\n        if(props.sheet === \"is\") {\n            return fillIncome();\n        } else if(props.sheet === \"cfs\") {\n            return fillCashFlow();\n        } else if(props.sheet === \"bs\") {\n            return fillBalance();\n        }\n    }\n\n    const createTable = () => {\n        if(props.loaded) {\n            return (\n                <Table striped bordered hover size=\"sm\">\n                    <tbody>\n                    {fillData()}\n                    </tbody>\n                </Table>);\n        }\n    }\n\n    return (\n        <div>\n            {createTable()}\n        </div>\n    );\n}\n\nexport default StatementTable;\n","import {Button, ButtonGroup} from \"react-bootstrap\";\nimport {useState} from \"react\";\n\nfunction SelectSheet(props) {\n\n    const [initActive,setInitActive] = useState(true);\n\n    const handleClick = (e) => {\n        props.parentSetSheet(e.target.value);\n        setInitActive(false);\n    }\n\n    return (\n        <div>\n            <ButtonGroup onClick={handleClick}>\n                <Button variant=\"secondary\" value=\"is\" active={initActive} selected={true}>Income Statement</Button>\n                <Button variant=\"secondary\" value=\"cfs\">Cash Flow Statement</Button>\n                <Button variant=\"secondary\" value=\"bs\">Balance Sheet</Button>\n            </ButtonGroup>\n        </div>\n    )\n}\n\nexport default SelectSheet;","import './App.css';\nimport SearchBar from './components/SearchBar';\nimport StatementTable from './components/StatementTable';\nimport SelectSheet from './components/SelectSheet';\nimport {useState, useEffect} from \"react\";\nimport fetch from \"axios\";\n\nfunction App() {\n  const [name, setName] = useState(null);\n  const [cik,setCik] = useState(null);\n  const [sheet,setSheet] = useState(\"is\");\n  const [data,setData] = useState({});\n  const [loading,setLoading] = useState(false);\n  const [loaded,setLoaded] = useState(false);\n\n  useEffect(() => {\n      if(cik) {\n          setLoading(true);\n          fetch(`https://data.sec.gov/api/xbrl/companyfacts/CIK${cik}.json`)\n              .then(\n                  (result) => {\n                      console.log(result.data);\n                      setData(result.data);\n                      setLoaded(true);\n                      setLoading(false);\n                  },\n                  (error) => {\n                      console.log(error);\n                      setLoading(false);\n                  }\n              )\n      }\n  }, [cik]);\n\n\n  return (\n    <div className=\"App\">\n        <h1>{name} {cik}</h1>\n        <div className=\"search-bar\">\n            <SearchBar parentSetCik={setCik} parentSetName={setName}/>\n        </div>\n        <div className=\"select-sheet\">\n            <SelectSheet parentSetSheet={setSheet}/>\n        </div>\n        <div className=\"statement-table\">\n            <StatementTable sheet={sheet} data={data} loading={loading} loaded={loaded}/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}